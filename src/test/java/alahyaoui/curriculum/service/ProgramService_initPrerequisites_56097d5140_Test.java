// Test generated by RoostGPT for test knote-java using AI Type Open AI and AI Model gpt-4

package alahyaoui.curriculum.service;

import java.io.IOException;
import java.io.InputStreamReader;
import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvValidationException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.ClassPathResource;
import alahyaoui.curriculum.business.CourseGraph;
import alahyaoui.curriculum.business.CourseNode;

import static org.mockito.Mockito.*;

public class ProgramService_initPrerequisites_56097d5140_Test {

    @InjectMocks
    ProgramService programService;

    @Mock
    CourseGraph courseGraph;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInitPrerequisites() throws IOException, CsvValidationException {
        String path = "static/data/prerequisites.csv";
        var fileReader = new InputStreamReader(new ClassPathResource(path).getInputStream());
        CSVReader reader = new CSVReader(fileReader);
        String[] values = {"course1", "course2"};

        when(reader.readNext()).thenReturn(values).thenReturn(null);
        CourseNode courseNode = new CourseNode("course1");
        CourseNode prerequisiteNode = new CourseNode("course2");

        when(courseGraph.search(values[0])).thenReturn(courseNode);
        when(courseGraph.search(values[1])).thenReturn(prerequisiteNode);

        programService.initPrerequisites();

        verify(courseNode, times(1)).addPrerequisite(prerequisiteNode);
    }

    @Test(expected = IOException.class)
    public void testInitPrerequisites_IOException() throws IOException, CsvValidationException {
        String path = "static/data/prerequisites.csv";
        var fileReader = new InputStreamReader(new ClassPathResource(path).getInputStream());
        CSVReader reader = new CSVReader(fileReader);

        when(reader.readNext()).thenThrow(new IOException());

        programService.initPrerequisites();
    }

    @Test(expected = CsvValidationException.class)
    public void testInitPrerequisites_CsvValidationException() throws IOException, CsvValidationException {
        String path = "static/data/prerequisites.csv";
        var fileReader = new InputStreamReader(new ClassPathResource(path).getInputStream());
        CSVReader reader = new CSVReader(fileReader);

        when(reader.readNext()).thenThrow(new CsvValidationException("CSV Validation Error"));

        programService.initPrerequisites();
    }
}
